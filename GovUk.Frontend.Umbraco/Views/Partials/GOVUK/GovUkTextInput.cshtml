@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<OverridableBlockListItem>;
@addTagHelper *, GovUk.Frontend.AspNetCore
@addTagHelper *, GovUk.Frontend.AspNetCore.Extensions
@using GovUk.Frontend.Umbraco
@using GovUk.Frontend.Umbraco.Typography
@using GovUk.Frontend.Umbraco.Models
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Umbraco.Extensions
@{
    var modelPropertyName = Model.Settings.Value<string>(PropertyAliases.ModelProperty);
    ModelStateEntry? modelStateEntry = null;
    if (!string.IsNullOrEmpty(modelPropertyName))
    {
        ViewContext.ModelState.TryGetValue(modelPropertyName, out modelStateEntry);
    }
    var prefix = Model.Settings.Value<string>("prefix");
    var suffix = Model.Settings.Value<string>("suffix");
    var cssClasses = Model.Settings.Value<string>(PropertyAliases.CssClasses);
    var labelIsPageHeading = Model.Settings.Value<bool>("labelIsPageHeading");
    var hint = GovUkTypography.Apply(Model.Content.Value<string>("hint"), new TypographyOptions { RemoveWrappingParagraph = true });

    // If this component is bound to separate properties for validation, and one or more of those properties are invalid, 
    // get the ids of error messages bound to the invalid properties and link them with aria-describedby.
    var describedByIds = new List<string>();
    for (var i = 1; i<= 3; i++)
    {
        var validationPropertyName = Model.Settings.Value<string>($"validationProperty{i}");
        ModelStateEntry? validationPropertyModelStateEntry = null;
        if (!string.IsNullOrEmpty(validationPropertyName))
        {
            ViewContext.ModelState.TryGetValue(validationPropertyName, out validationPropertyModelStateEntry);
            if (validationPropertyModelStateEntry?.ValidationState == ModelValidationState.Invalid)
            {
                describedByIds.Add(validationPropertyName);
            }
        }
    }
    var inputAttributes = new Dictionary<string,string>();
    if (!string.IsNullOrEmpty(cssClasses)) { inputAttributes.Add("class", cssClasses); }
    if (describedByIds.Any()) { inputAttributes.Add("aria-describedby", string.Join(' ', describedByIds.ToArray())); }
}
<govuk-client-side-validation
    error-message-required="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRequired))"
    error-message-regex="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRegex))"
    error-message-email="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageEmail))"
    error-message-phone="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessagePhone))"
    error-message-length="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageLength))"
    error-message-minlength="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageMinLength))"
    error-message-maxlength="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageMaxLength))"
    error-message-range="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRange))"
    error-message-compare="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageCompare))"
>
    <govuk-input name="@modelPropertyName" value="@modelStateEntry?.AttemptedValue" input-attributes="inputAttributes">
        <govuk-input-label is-page-heading="@labelIsPageHeading" class="@(labelIsPageHeading ? "govuk-label--l" : null)">@(
        Model.Content.Value<string>("label")
        )</govuk-input-label>
        @if (!string.IsNullOrWhiteSpace(hint))
        {
            <govuk-input-hint>@Html.Raw(hint)</govuk-input-hint>
        }
        @if (modelStateEntry != null && modelStateEntry.Errors.Any())
        {
            <govuk-input-error-message>@(
        string.Join(". ", modelStateEntry.Errors.Select(x => x.ErrorMessage))
        )</govuk-input-error-message>
        }
        @if (!string.IsNullOrEmpty(prefix))
        {
            <govuk-input-prefix>@prefix</govuk-input-prefix>
        }
        @if (!string.IsNullOrEmpty(suffix))
        {
            <govuk-input-suffix>@suffix</govuk-input-suffix>
        }
    </govuk-input>
</govuk-client-side-validation>