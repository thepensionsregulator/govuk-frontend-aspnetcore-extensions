@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IOverridableBlockReference<IOverridablePublishedElement,IOverridablePublishedElement>>;
@addTagHelper *, GovUk.Frontend.AspNetCore
@addTagHelper *, GovUk.Frontend.AspNetCore.Extensions
@inject IModelPropertyResolver propertyResolver
@using GovUk.Frontend.AspNetCore.Extensions.Validation
@using GovUk.Frontend.Umbraco
@using GovUk.Frontend.Umbraco.Models
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using GovUk.Frontend.Umbraco.Validation
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using ThePensionsRegulator.Umbraco;
@using ThePensionsRegulator.Umbraco.Blocks;
@using Umbraco.Cms.Core.Strings;
@using Umbraco.Extensions
@{
    var modelPropertyName = Model.Settings.Value<string>(PropertyAliases.ModelProperty);
    ModelStateEntry? modelStateEntry = null;
    if (!string.IsNullOrEmpty(modelPropertyName))
    {
        ViewContext.ModelState.TryGetValue(modelPropertyName, out modelStateEntry);
    }
    Int32.TryParse(Model.Settings.Value<string>(PropertyAliases.TextareaRows), out var rows);
    if (rows < 2) { rows = 5; }
    var label = Model.Content.Value<string>(PropertyAliases.TextareaLabel)?.Replace("{{name}}", Umbraco.AssignedContentItem.Name);
    var labelIsPageHeading = Model.Settings.Value<bool>(PropertyAliases.LabelIsPageHeading);
    var labelClass = labelIsPageHeading ? "govuk-label--l" : null;
    var hint = Model.Content.Value<IHtmlEncodedString>(PropertyAliases.Hint);
    var hasHint = !string.IsNullOrWhiteSpace(hint?.ToHtmlString());
    var invalid = (modelStateEntry is not null && modelStateEntry.ValidationState == ModelValidationState.Invalid && modelStateEntry.Errors.Any()).ToString().ToLowerInvariant();
    var hasErrorMessage = (modelStateEntry is not null && modelStateEntry.ValidationState == ModelValidationState.Invalid && modelStateEntry.Errors.Any(x => x.ErrorMessage != ValidationConstants.FIELDSET_ERROR));
    var errorMessage = hasErrorMessage ? string.Join(". ", modelStateEntry!.Errors.Where(x => x.ErrorMessage != ValidationConstants.FIELDSET_ERROR).Select(x => x.ErrorMessage)) : null;
    var cssClasses = Model.Settings.Value<string>(PropertyAliases.CssClasses);
    var readOnly = Model.Settings.Value<bool>(PropertyAliases.ReadOnly);
}
<govuk-client-side-validation
    error-message-required="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRequired))"
    error-message-regex="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRegex))"
    error-message-email="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageEmail))"
    error-message-length="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageLength))"
    error-message-minlength="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageMinLength))"
    error-message-maxlength="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageMaxLength))"
    error-message-range="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRange))"
    error-message-compare="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageCompare))"
>
    @if (Model.Settings.Value<bool>(PropertyAliases.TextareaShowCharacterCount))
    {
        var modelProperty = !string.IsNullOrEmpty(modelPropertyName) ? propertyResolver.ResolveModelProperty(propertyResolver.ResolveModelType(ViewContext), modelPropertyName) : null;
        var maxLengthAttr = modelProperty?.GetCustomAttributes<MaxLengthAttribute>().FirstOrDefault();
        var stringLengthAttr = modelProperty?.GetCustomAttributes<StringLengthAttribute>().FirstOrDefault();
        int? maxLength = maxLengthAttr != null ? maxLengthAttr.Length : stringLengthAttr != null ? stringLengthAttr.MaximumLength : null;
        var threshold = Model.Settings.Value<int?>(PropertyAliases.TextareaCharacterCountThreshold);
        <govuk-character-count name="@modelPropertyName" form-group-class="@cssClasses" rows="@rows" max-length="@maxLength" threshold="@threshold" textarea-aria-invalid="@invalid">
            <govuk-character-count-label is-page-heading="@labelIsPageHeading" class="@labelClass">@label</govuk-character-count-label>
            @if (hasHint)
            {
                <govuk-character-count-hint>@hint</govuk-character-count-hint>
            }
            <govuk-character-count-error-message>@errorMessage</govuk-character-count-error-message>
            <govuk-character-count-value>@modelStateEntry?.AttemptedValue</govuk-character-count-value>
        </govuk-character-count>
    }
    else
    {
        if (readOnly)
        {
            <govuk-textarea name="@modelPropertyName" class="@cssClasses" rows="@rows" textarea-aria-invalid="@invalid" textarea-readonly="readonly">
                <govuk-textarea-label is-page-heading="@labelIsPageHeading" class="@labelClass">@label</govuk-textarea-label>
                @if (hasHint)
                {
                    <govuk-textarea-hint>@hint</govuk-textarea-hint>
                }
                <govuk-textarea-error-message>@errorMessage</govuk-textarea-error-message>
                <govuk-textarea-value>@modelStateEntry?.AttemptedValue</govuk-textarea-value>
            </govuk-textarea>
        }
        else
        {
            <govuk-textarea name="@modelPropertyName" class="@cssClasses" rows="@rows" textarea-aria-invalid="@invalid">
                <govuk-textarea-label is-page-heading="@labelIsPageHeading" class="@labelClass">@label</govuk-textarea-label>
                @if (hasHint)
                {
                    <govuk-textarea-hint>@hint</govuk-textarea-hint>
                }
                <govuk-textarea-error-message>@errorMessage</govuk-textarea-error-message>
                <govuk-textarea-value>@modelStateEntry?.AttemptedValue</govuk-textarea-value>
            </govuk-textarea>
        }
    }
</govuk-client-side-validation>