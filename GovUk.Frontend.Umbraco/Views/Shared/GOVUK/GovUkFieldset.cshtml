@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IOverridableBlockReference<IOverridablePublishedElement,IOverridablePublishedElement>>;
@addTagHelper *, GovUk.Frontend.AspNetCore
@using GovUk.Frontend.Umbraco
@using GovUk.Frontend.Umbraco.Models
@using GovUk.Frontend.Umbraco.Services
@using GovUk.Frontend.Umbraco.Validation
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using ThePensionsRegulator.Umbraco;
@using ThePensionsRegulator.Umbraco.Blocks;
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Extensions
@{
    var blocks = Model.Content.Value<OverridableBlockListModel>(PropertyAliases.FieldsetBlocks);
    var cssClass = Model.Settings.Value<string>(PropertyAliases.CssClasses);
    var legendIsPageHeading = Model.Settings.Value<bool>(PropertyAliases.FieldsetLegendIsPageHeading);
    var legend = Model.Content.Value<string>("legend")?.Replace("{{name}}", Umbraco.AssignedContentItem.Name);

    // If there is a fieldset-level error, add extra classes to show that the entire fieldset is in an error state.
    // If legendIsPageHeading is false, the classes are assigned in BlockList.cshtml, but describedBy must always be set here.
    var fieldsetErrors = GovUkFieldsetErrorFinder.FindFieldsetErrors(Model, ViewContext.ModelState);
    var hasFieldsetError = fieldsetErrors.Any();
    var fieldsetErrorClasses = hasFieldsetError && legendIsPageHeading ? "govuk-form-group govuk-form-group--error" : null;
    var describedBy = hasFieldsetError ? string.Join(' ', fieldsetErrors.Select(x => x.Settings.Value<string>(PropertyAliases.ModelProperty)).ToArray()) : null;

    // Add an error to ModelState so that we can communicate the presence of a fieldset error to each field within it
    if (blocks != null && hasFieldsetError) {
        var allDescendentFields = blocks.FindBlocks(x => x.Content.ContentType.Alias == ElementTypeAliases.Checkbox || 
                                                         x.Content.ContentType.Alias == ElementTypeAliases.Checkboxes || 
                                                         x.Content.ContentType.Alias == ElementTypeAliases.DateInput || 
                                                         x.Content.ContentType.Alias == ElementTypeAliases.Radios || 
                                                         x.Content.ContentType.Alias == ElementTypeAliases.Select ||
                                                         x.Content.ContentType.Alias == ElementTypeAliases.TextInput || 
                                                         x.Content.ContentType.Alias == ElementTypeAliases.Textarea);
        foreach (var field in allDescendentFields) {
            var modelPropertyName = field.Settings.Value<string>(PropertyAliases.ModelProperty);
            if (!string.IsNullOrEmpty(modelPropertyName)) {
                ViewContext.ModelState.AddModelError(modelPropertyName, ValidationConstants.FIELDSET_ERROR);
            }
        }
    }
}
<govuk-fieldset class="@cssClass" described-by="@describedBy">
    <govuk-fieldset-legend is-page-heading="@legendIsPageHeading" class="@(legendIsPageHeading ? "govuk-fieldset__legend--l" : "govuk-fieldset__legend--for-fieldset")">@legend</govuk-fieldset-legend>
    @if (hasFieldsetError){
        @:<div class="govuk-grid-row @fieldsetErrorClasses">
        @:<div class="govuk-grid-column govuk-grid-column-full">
    }
    @await Html.PartialAsync("GOVUK/BlockList", blocks)
    @if (hasFieldsetError){
        @:</div>
        @:</div>
    }
</govuk-fieldset>