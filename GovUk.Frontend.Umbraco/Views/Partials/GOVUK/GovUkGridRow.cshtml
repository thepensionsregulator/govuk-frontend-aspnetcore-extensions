@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<OverridableBlockListItem>;
@addTagHelper *, GovUk.Frontend.AspNetCore
@using GovUk.Frontend.Umbraco
@using GovUk.Frontend.Umbraco.Models
@using ThePensionsRegulator.Umbraco.BlockLists;
@using Umbraco.Cms.Core.Models.Blocks
@using GovUk.Frontend.Umbraco.Services
@using Umbraco.Extensions
@{
    var blocks = Model.Content.Value<OverridableBlockListModel>("blocks")?.FilteredBlocks().ToList();
    var rowClass = Model.Settings?.Value<string>(PropertyAliases.CssClassesForRow);
    var columnClass = GovUkGridClassBuilder.BuildGridColumnClass(
                        Model.Settings?.Value<string>(PropertyAliases.ColumnSize), 
                        Model.Settings?.Value<string>(PropertyAliases.ColumnSizeFromDesktop), 
                        Model.Settings?.Value<string>(PropertyAliases.CssClassesForColumn)).TrimEnd();
}
<div class="govuk-grid-row @rowClass">
    <div class="@columnClass">
    @{
        // Put each child item in a grid row, except where multiple columns follow each other, then they need to be in the same row.
        for (var i = 0; i < blocks.Count; i++)
        {
            var isOpeningColumnSet = blocks[i].Content.ContentType.Alias == ElementTypeAliases.GridColumn && (i == 0 || blocks[i - 1].Content.ContentType.Alias != ElementTypeAliases.GridColumn);
            var isClosingColumnSet = blocks[i].Content.ContentType.Alias == ElementTypeAliases.GridColumn && (i == blocks.Count-1 || blocks[i + 1].Content.ContentType.Alias != ElementTypeAliases.GridColumn);

            if (isOpeningColumnSet)
            {
                @:<div class="govuk-grid-row">
            }
            @await Html.PartialAsync("GOVUK/" + blocks[i].Content.ContentType.Alias, blocks[i])
            if (isClosingColumnSet)
            {
                @:</div>                    
            }
        }
    }
    </div>
</div>