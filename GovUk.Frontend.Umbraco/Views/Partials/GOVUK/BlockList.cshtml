@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IEnumerable<BlockListItem>>
@using GovUk.Frontend.Umbraco
@using GovUk.Frontend.Umbraco.Models
@using GovUk.Frontend.Umbraco.Services
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Extensions
@{
    var filteredModel = Model as OverridableBlockListModel ?? new OverridableBlockListModel(Model, null);
    var blocks = filteredModel.FilteredBlocks().ToList();
    if (!blocks.Any()) { return; }
    string? previousRowClass = null, previousColumnClass = null;
    bool? previousIsGridRowBlock = null;
}
@* Renders a partial view for each block.
   Renders blocks within a GOV.UK grid row, except where that block is a 'govukGridRow' in which case that task is delegated.
   Combines sibling rows with identical classes to simplify the HTML, but also to reduce instances where the grid rows 
   interfere with the spacing between components. Spacing (particularly for inset text) can rely on margin collapsing and
   wrapping every component in a grid row prevents that from working because the components no longer directly follow each other.
*@
@for (var i = 0; i < blocks.Count; i++)
{
    var block = blocks[i];
    if (blocks[i]?.ContentUdi == null) { continue; }

    var isGridRowBlock = blocks[i].Content.ContentType.Alias == ElementTypeAliases.GridRow;
    string rowClass = GovUkGridClassBuilder.BuildGridRowClass(blocks[i].Settings?.Value<string>(PropertyAliases.CssClassesForRow));
    var columnClass = GovUkGridClassBuilder.BuildGridColumnClass(
                        blocks[i].Settings?.Value<string>(PropertyAliases.ColumnSize), 
                        blocks[i].Settings?.Value<string>(PropertyAliases.ColumnSizeFromDesktop), 
                        blocks[i].Settings?.Value<string>(PropertyAliases.CssClassesForColumn));

    // If there is a fieldset-level error, add extra classes to show that the entire fieldset is in an error state
    var fieldsetErrorClass = GovUkFieldsetAttributeBuilder.BuildFieldsetErrorClass(blocks[i], ViewContext.ModelState, false);
    if (!string.IsNullOrEmpty(fieldsetErrorClass))
    {
        rowClass += " " + fieldsetErrorClass;
    }

    var sameAsPrevious = (isGridRowBlock == previousIsGridRowBlock && rowClass == previousRowClass && columnClass == previousColumnClass);

    var sameAsNext = (i < blocks.Count-1 &&
                          isGridRowBlock == (blocks[i + 1].Content.ContentType.Alias == ElementTypeAliases.GridRow) &&
                          rowClass == GovUkGridClassBuilder.BuildGridRowClass(blocks[i+1].Settings?.Value<string>(PropertyAliases.CssClassesForRow)) &&
                          columnClass == GovUkGridClassBuilder.BuildGridColumnClass(
                                                    blocks[i+1].Settings?.Value<string>(PropertyAliases.ColumnSize), 
                                                    blocks[i+1].Settings?.Value<string>(PropertyAliases.ColumnSizeFromDesktop), 
                                                    blocks[i+1].Settings?.Value<string>(PropertyAliases.CssClassesForColumn)));

    @if (filteredModel.RenderGrid && !isGridRowBlock && !sameAsPrevious) { 
        @:<div class="@rowClass"> 
        @:<div class="@columnClass"> 
    }
    @await Html.PartialAsync("GOVUK/" + blocks[i].Content.ContentType.Alias, block)
    @if (filteredModel.RenderGrid && !isGridRowBlock && !sameAsNext) {
        @:</div> 
        @:</div> 
    }

    previousIsGridRowBlock = isGridRowBlock;
    previousRowClass = rowClass;
    previousColumnClass = columnClass;
}