@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IOverridableBlockReference<IOverridablePublishedElement,IOverridablePublishedElement>>;
@addTagHelper *, GovUk.Frontend.AspNetCore.Extensions
@using GovUk.Frontend.AspNetCore.Extensions.HtmlGeneration;
@using GovUk.Frontend.AspNetCore.Extensions;
@using GovUk.Frontend.Umbraco.Models
@using GovUk.Frontend.Umbraco;
@using Microsoft.AspNetCore.Mvc.ModelBinding;
@using ThePensionsRegulator.Umbraco.Blocks;
@using ThePensionsRegulator.Umbraco;
@using Umbraco.Extensions
@{
    // Get task statuses from ModelState, put there by BlockList.cshtml. We can't go to Model.AssignedContentItem to find the tasks
    // because that will give us the original BlockListItem, and we need the OverridableBlockListItem that may have been updated in the controller.
    List<TaskListTaskStatus> taskStatuses = new();
    ModelStateEntry? modelStateEntry = null;
    var modelPropertyName = Model.Content.Key.ToString();
    if (!string.IsNullOrEmpty(modelPropertyName))
    {
        if (ViewContext.ModelState.TryGetValue(modelPropertyName, out modelStateEntry) && !string.IsNullOrEmpty(modelStateEntry.AttemptedValue))
        {
            taskStatuses = modelStateEntry.AttemptedValue.Split(",").Select(x => Enum.Parse<TaskListTaskStatus>(x)).ToList();
        }            
    }

    var totalActionableTasks = taskStatuses.Count(x => x != TaskListTaskStatus.NotApplicable);
    var completedTasks = taskStatuses.Count(x => x == TaskListTaskStatus.Completed);

    if (!Int32.TryParse(Model.Settings.Value<string>("headingLevel")?.Replace("Heading ", string.Empty), out var headingLevel))
    {
        headingLevel = 2;
    }
    var incompleteStatus = Model.Content.Value<string>("incompleteStatus");
    if (string.IsNullOrEmpty(incompleteStatus)) { incompleteStatus = ComponentGenerator.TaskListSummaryDefaultIncompleteStatus; }
    var completedStatus = Model.Content.Value<string>("completedStatus");
    if (string.IsNullOrEmpty(completedStatus)) { completedStatus = ComponentGenerator.TaskListSummaryDefaultCompletedStatus; }
    var tracker = Model.Content.Value<string>("tracker");
    if (string.IsNullOrEmpty(tracker)) { tracker = ComponentGenerator.TaskListSummaryDefaultTracker; }
}

<govuk-task-list-summary 
    id="@Model.Content.Key"
    class="@(Model.Settings.Value<string>(PropertyAliases.CssClasses))"
    heading-level="@headingLevel"
    incomplete-status="@(incompleteStatus)"
    completed-status="@(completedStatus)"
    tracker="@(tracker)"
    total-tasks="@totalActionableTasks"
    completed-tasks="@completedTasks"
    />