parameters:
  - name: pushToNuGet
    displayName: Push to nuget.org
    type: boolean
    default: false

trigger:
  - develop

pool:
  vmImage: "windows-2022"

variables:
  - name: solution
    value: "$(Build.SourcesDirectory)/govuk-frontend-aspnetcore-extensions/GovUk.Frontend.sln"
  - name: buildPlatform
    value: "Any CPU"
  - name: buildConfiguration
    value: "Release"
  - name: YARN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.yarn
  - name: allowPush
    value: $[in(variables['Build.SourceBranch'], 'refs/heads/release', 'refs/heads/develop')]

resources:
  repositories:
    - repository: hooks
      type: git
      name: TPR/Tools-TPRGitHooks
      ref: develop
    - repository: pipelines
      type: git
      name: TPR/Tools-AzurePipelines
      ref: develop

steps:
  - checkout: self
    submodules: true
  - checkout: hooks
  - checkout: pipelines

  - template: git-secrets.steps.yml@hooks
    parameters:
      repoPath: $(Build.SourcesDirectory)\govuk-frontend-aspnetcore-extensions

  - task: NuGetToolInstaller@1

  - task: NodeTool@0
    inputs:
      versionSpec: "16.15.1"
    displayName: Set Node version

  - task: Cache@2
    inputs:
      key: 'yarn | "$(Agent.OS)" | $(Build.SourcesDirectory)\govuk-frontend-aspnetcore-extensions\yarn.lock'
      restoreKeys: |
        yarn | "$(Agent.OS)"
      path: $(YARN_CACHE_FOLDER)
    displayName: Cache Yarn packages

  - task: Yarn@3
    inputs:
      projectDirectory: '$(Build.SourcesDirectory)\govuk-frontend-aspnetcore-extensions'
      arguments: "audit --level moderate --groups dependencies"
    displayName: yarn audit

  - task: Yarn@3
    inputs:
      projectDirectory: '$(Build.SourcesDirectory)\govuk-frontend-aspnetcore-extensions'
      arguments: "--frozen-lockfile"
    displayName: yarn build

  - script: |
      cd $(Build.SourcesDirectory)\govuk-frontend-aspnetcore-extensions
      yarn jest --ci --watchAll=false --reporters=jest-junit --reporters=default --coverage --coverageReporters=cobertura
    displayName: Run JS tests
    continueOnError: false # Test failures should fail the build

  # Do not publish JS test results to the pipeline as Azure DevOps cannot publish both C# and JS results so we have to choose

  - task: UseDotNet@2
    displayName: Install .NET 6.0.6
    inputs:
      version: 6.0.301 # SDK version for 6.0.6
      performMultiLevelLookup: true
      includePreviewVersions: false

  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: "restore"
      projects: "$(solution)"
      includeNuGetOrg: true

  - template: security/check-nuget-packages.steps.yml@pipelines
    parameters:
      path: "$(solution)"

  # Build this project first to avoid a race condition with SASS compilation, where GovUk.Frontend.Umbraco depends upon this project completing first
  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: "build"
      arguments: --configuration $(buildConfiguration)
      projects: $(Build.SourcesDirectory)\govuk-frontend-aspnetcore-extensions\GovUk.Frontend.AspNetCore.Extensions\GovUk.Frontend.AspNetCore.Extensions.csproj

  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: "build"
      arguments: --configuration $(buildConfiguration)
      projects: |
        $(Build.SourcesDirectory)\govuk-frontend-aspnetcore-extensions\GovUk.Frontend.Umbraco\GovUk.Frontend.Umbraco.csproj
        $(Build.SourcesDirectory)\govuk-frontend-aspnetcore-extensions\GovUk.Frontend.Umbraco.Testing\GovUk.Frontend.Umbraco.Testing.csproj

  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: test
      arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'
      projects: "$(solution)"

  - task: PublishCodeCoverageResults@1
    displayName: "Publish code coverage"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Agent.TempDirectory)\**\coverage.cobertura.xml
      failIfCoverageEmpty: true

  - task: CopyFiles@2
    displayName: Copy packages to staging folder
    inputs:
      SourceFolder: $(Build.SourcesDirectory)\govuk-frontend-aspnetcore-extensions
      Contents: |
        **\bin\$(buildConfiguration)\ThePensionsRegulator.GovUk.Frontend*.nupkg
        !**\bin\$(buildConfiguration)\ThePensionsRegulator.GovUk.Frontend*.symbols.nupkg
      TargetFolder: $(Build.ArtifactStagingDirectory)
      CleanTargetFolder: true
      flattenFolders: true

  - ${{ if eq(parameters.pushToNuGet, true) }}:
      - task: NuGetCommand@2
        displayName: "Push to nuget.org"
        condition: and(succeeded(), eq(variables.allowPush, true))
        inputs:
          command: push
          packagesToPush: "$(Build.ArtifactStagingDirectory)/**/*.nupkg"
          nuGetFeedType: external
          publishFeedCredentials: NUGET
