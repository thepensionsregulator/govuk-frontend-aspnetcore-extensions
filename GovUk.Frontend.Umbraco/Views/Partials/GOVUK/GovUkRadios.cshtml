@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<OverridableBlockListItem>;
@addTagHelper *, GovUk.Frontend.AspNetCore
@addTagHelper *, GovUk.Frontend.AspNetCore.Extensions
@using GovUk.Frontend.Umbraco
@using GovUk.Frontend.Umbraco.Typography
@using GovUk.Frontend.Umbraco.Models
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Extensions
@{
    var radioButtons = Model.Content.Value<OverridableBlockListModel>("radioButtons")!;
    var modelPropertyName = Model.Settings.Value<string>(PropertyAliases.ModelProperty);
    ModelStateEntry? modelStateEntry = null;
    if (!string.IsNullOrEmpty(modelPropertyName))
    {
        ViewContext.ModelState.TryGetValue(modelPropertyName, out modelStateEntry);
    }
    var attemptedValue = modelStateEntry?.AttemptedValue?.ToUpperInvariant();
    var cssClass = Model.Settings.Value<string>("cssClasses");
    if (Model.Settings.Value<string>("layout") == "Horizontal")
    {
        cssClass = (cssClass + " govuk-radios--inline").TrimStart();
    }
    var fieldsetHint = GovUkTypography.Apply(Model.Content.Value<string>("hint"), new TypographyOptions { RemoveWrappingParagraph = true });
    var cssClassesForHint = Model.Settings.Value<string>("cssClassesForHint");
    var cssClassesForError = Model.Settings.Value<string>("cssClassesForError");
    var cssClassesForRadios = Model.Settings.Value<string>("cssClassesForRadios");
    var legendIsPageHeading = Model.Settings.Value<bool>("legendIsPageHeading");
    var legend = Model.Content.Value<string>("legend")?.Replace("{{name}}", Umbraco.AssignedContentItem.Name);
}
<govuk-client-side-validation error-message-required="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRequired))">
    <govuk-radios name="@modelPropertyName" class="@cssClass" radios-class="@cssClassesForRadios">
         <govuk-radios-fieldset>
            <govuk-radios-fieldset-legend is-page-heading="@legendIsPageHeading" class="@(legendIsPageHeading ? "govuk-fieldset__legend--l" : "govuk-fieldset__legend--for-field")">@legend</govuk-radios-fieldset-legend>
        @if (!string.IsNullOrWhiteSpace(fieldsetHint))
        {
            <govuk-radios-hint class="@cssClassesForHint">@Html.Raw(fieldsetHint)</govuk-radios-hint>
        }
        @if (modelStateEntry != null && modelStateEntry.Errors.Any())
        {
            <govuk-radios-error-message class="@cssClassesForError">@(modelStateEntry != null && modelStateEntry.Errors.Any() ? string.Join(". ", modelStateEntry.Errors.Select(x => x.ErrorMessage)) : null)</govuk-radios-error-message>
        }
        @foreach (var block in radioButtons.Filter(radioButtons))
        {
            if (block.Content.ContentType.Alias == "govukRadiosDivider")
            {
                <govuk-radios-divider>@(string.IsNullOrWhiteSpace(block.Content.Value<string>("text")) ? "or" : block.Content.Value<string>("text"))</govuk-radios-divider>
            }
            else
            {
                var value = block.Content.Value<string>("value") ?? string.Empty;

                <govuk-radios-item value="@value" class="@(block.Settings.Value<string>("cssClasses"))" checked="@(value.ToUpperInvariant() == attemptedValue)">@(block.Content.Value<string>("label"))
                    <govuk-radios-item-hint>@Html.Raw(GovUkTypography.Apply(block.Content.Value<string>("hint"), new TypographyOptions{ RemoveWrappingParagraph = true }))</govuk-radios-item-hint>
                    @{
                        var conditional = block.Content.Value<OverridableBlockListModel>("conditionalBlocks")!;
                        if (conditional.Any()){
                            <govuk-radios-item-conditional>
                                @await Html.PartialAsync("GOVUK/BlockList", conditional)
                            </govuk-radios-item-conditional>
                        }
                    }
                </govuk-radios-item>                
            }
        }
        </govuk-radios-fieldset>
    </govuk-radios>
</govuk-client-side-validation>