@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IOverridableBlockReference<IOverridablePublishedElement,IOverridablePublishedElement>>;
@addTagHelper *, GovUk.Frontend.AspNetCore
@addTagHelper *, GovUk.Frontend.AspNetCore.Extensions
@using GovUk.Frontend.Umbraco
@using GovUk.Frontend.Umbraco.Models
@using GovUk.Frontend.Umbraco.Validation
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using ThePensionsRegulator.Umbraco.Blocks;
@using ThePensionsRegulator.Umbraco;
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Core.Strings;
@using Umbraco.Extensions
@{
    var options = Model.Content.Value<OverridableBlockListModel>(PropertyAliases.SelectOptions)!;

    var modelPropertyName = Model.Settings.Value<string>(PropertyAliases.ModelProperty);
    ModelStateEntry? modelStateEntry = null;
    if (!string.IsNullOrEmpty(modelPropertyName))
    {
        ViewContext.ModelState.TryGetValue(modelPropertyName, out modelStateEntry);
    }
    var cssClasses = Model.Settings.Value<string>(PropertyAliases.CssClasses);
    var attemptedValue = modelStateEntry?.AttemptedValue?.ToUpperInvariant();
    var label = Model.Content.Value<string>(PropertyAliases.SelectLabel)?.Replace("{{name}}", Umbraco.AssignedContentItem.Name);
    var labelIsPageHeading = Model.Settings.Value<bool>(PropertyAliases.LabelIsPageHeading);
    var labelClass = labelIsPageHeading ? "govuk-label--l" : null;
    var hint = Model.Content.Value<IHtmlEncodedString>(PropertyAliases.Hint);
    var hasHint = !string.IsNullOrWhiteSpace(hint?.ToHtmlString());
    var invalid = modelStateEntry?.Errors.Any().ToString().ToLowerInvariant() ?? "false";
    var hasErrorMessage = modelStateEntry?.Errors.Any(x => x.ErrorMessage != ValidationConstants.FIELDSET_ERROR) ?? false;
    var errorMessage = hasErrorMessage ? string.Join(". ", modelStateEntry!.Errors.Where(x => x.ErrorMessage != ValidationConstants.FIELDSET_ERROR).Select(x => x.ErrorMessage)) : null;
}
<govuk-client-side-validation
    error-message-required="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRequired))">
    <govuk-select name="@modelPropertyName" class="@cssClasses" select-aria-invalid="@invalid">
        <govuk-select-label is-page-heading="@labelIsPageHeading" class="@labelClass">@label</govuk-select-label>
        @if (hasHint)
        {
            <govuk-select-hint>@hint</govuk-select-hint>
        }
        <govuk-select-error-message>@errorMessage</govuk-select-error-message>
        @foreach (var block in options.FilteredBlocks())
        {
            var value = block.Content.Value<string>(PropertyAliases.SelectOptionValue);
            <govuk-select-item value="@value" selected="@(value == attemptedValue)">@(block.Content.Value<string>(PropertyAliases.SelectOptionLabel))</govuk-select-item>
        }
    </govuk-select>
</govuk-client-side-validation>