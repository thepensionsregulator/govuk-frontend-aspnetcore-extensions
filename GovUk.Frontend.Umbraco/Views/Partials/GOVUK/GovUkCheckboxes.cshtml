@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<OverridableBlockListItem>;
@addTagHelper *, GovUk.Frontend.AspNetCore
@addTagHelper *, GovUk.Frontend.AspNetCore.Extensions
@using GovUk.Frontend.Umbraco
@using GovUk.Frontend.Umbraco.Typography
@using GovUk.Frontend.Umbraco.Models
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Extensions
@{
    var checkboxes = Model.Content.Value<OverridableBlockListModel>("checkboxes")!;
    var modelPropertyName = Model.Settings.Value<string>(PropertyAliases.ModelProperty);
    ModelStateEntry? modelStateEntry = null;
    if (!string.IsNullOrEmpty(modelPropertyName))
    {
        ViewContext.ModelState.TryGetValue(modelPropertyName, out modelStateEntry);
    }
    var cssClass = Model.Settings.Value<string>(PropertyAliases.CssClasses);
    var fieldsetHint = GovUkTypography.Apply(Model.Content.Value<string>("hint"), new TypographyOptions { RemoveWrappingParagraph = true });
    var cssClassesForHint = Model.Settings.Value<string>("cssClassesForHint");
    var cssClassesForError = Model.Settings.Value<string>("cssClassesForError");
    var cssClassesForCheckboxes = Model.Settings.Value<string>("cssClassesForCheckboxes");
    var legendIsPageHeading = Model.Settings.Value<bool>("legendIsPageHeading");
    var legend = Model.Content.Value<string>("legend")?.Replace("{{name}}", Umbraco.AssignedContentItem.Name);
    var selectedValues = new List<string>();
    if (!string.IsNullOrEmpty(modelStateEntry?.AttemptedValue)) { selectedValues.AddRange(modelStateEntry.AttemptedValue.ToUpperInvariant().Split(",")); }
}

<govuk-client-side-validation error-message-required="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRequired))">
    <govuk-checkboxes name="@modelPropertyName" class="@cssClass" checkboxes-class="@cssClassesForCheckboxes">
         <govuk-checkboxes-fieldset>
            <govuk-checkboxes-fieldset-legend is-page-heading="@legendIsPageHeading" class="@(legendIsPageHeading ? "govuk-fieldset__legend--l" : "govuk-fieldset__legend--for-field")">@legend</govuk-checkboxes-fieldset-legend>
            @{
                if (!string.IsNullOrWhiteSpace(fieldsetHint))
                {
                    <govuk-checkboxes-hint class="@cssClassesForHint">@Html.Raw(fieldsetHint)</govuk-checkboxes-hint>
                }
                if (modelStateEntry != null && modelStateEntry.Errors.Any())
                {
                    <govuk-checkboxes-error-message>@(string.Join(". ", modelStateEntry.Errors.Select(x => x.ErrorMessage)))</govuk-checkboxes-error-message>
                }
                foreach (var block in checkboxes.Filter(checkboxes))
                {
                    if (block.Content.ContentType.Alias == "govukCheckboxesDivider")
                    {
                        <govuk-checkboxes-divider>@(string.IsNullOrWhiteSpace(block.Content.Value<string>("text")) ? "or" : block.Content.Value<string>("text"))</govuk-checkboxes-divider>
                    }
                    else
                    {
                        if (block.Settings.Value<bool>("exclusive")) 
                        {
                            var value = block.Content.Value<string>("value") ?? string.Empty;
                            var checkboxHint = GovUkTypography.Apply(block.Content.Value<string>("hint"), new TypographyOptions { RemoveWrappingParagraph = true });
                            <govuk-checkboxes-item value="@value" checked="@(selectedValues.Contains(value.ToUpperInvariant()))" class="@(block.Settings.Value<string>(PropertyAliases.CssClasses))" input-data-behaviour="exclusive">
                                @(block.Content.Value<string>("label"))
                                @{
                                    if (!string.IsNullOrWhiteSpace(checkboxHint)) 
                                    {
                                        <govuk-checkboxes-item-hint>@Html.Raw(checkboxHint)</govuk-checkboxes-item-hint>
                                    }
                                    var conditional = block.Content.Value<OverridableBlockListModel>("conditionalBlocks")!;
                                    if (conditional.Any()){
                                        <govuk-checkboxes-item-conditional>
                                            @await Html.PartialAsync("GOVUK/BlockList", conditional)
                                        </govuk-checkboxes-item-conditional>
                                    }
                                }
                            </govuk-checkboxes-item>
                        }
                        else
                        {
                            var value = block.Content.Value<string>("value") ?? string.Empty;
                            var checkboxHint = GovUkTypography.Apply(block.Content.Value<string>("hint"), new TypographyOptions { RemoveWrappingParagraph = true });
                            <govuk-checkboxes-item value="@value" checked="@(selectedValues.Contains(value.ToUpperInvariant()))" class="@(block.Settings.Value<string>(PropertyAliases.CssClasses))">@(block.Content.Value<string>("label"))
                                @{
                                    if (!string.IsNullOrWhiteSpace(checkboxHint)) 
                                    {
                                        <govuk-checkboxes-item-hint>@Html.Raw(checkboxHint)</govuk-checkboxes-item-hint>
                                    }
                                    var conditional = block.Content.Value<OverridableBlockListModel>("conditionalBlocks")!;
                                    if (conditional.Any()){
                                        <govuk-checkboxes-item-conditional>
                                            @await Html.PartialAsync("GOVUK/BlockList", conditional)
                                        </govuk-checkboxes-item-conditional>
                                    }
                                }
                            </govuk-checkboxes-item>                    
                        }
                    }
                }
            }
        </govuk-checkboxes-fieldset>
    </govuk-checkboxes>
</govuk-client-side-validation>