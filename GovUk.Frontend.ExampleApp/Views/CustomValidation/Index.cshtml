@using GovUk.Frontend.ExampleApp.Models
@model CustomValidationViewModel
@{
    ViewData["Title"] = "Custom Validation";
}
@section language {
    <partial name="_LanguageSwitcher" />
}

    @*<partial name="GOVUK/ErrorSummary" />
*@
    <span class="govuk-caption-xl">GOV.UK Design System</span>

    <form asp-controller="CustomValidation" asp-action="Post" method="post" novalidate>
        <govuk-fieldset>
            <govuk-fieldset-legend class="govuk-fieldset__legend--l">
                Custom Validation
            </govuk-fieldset-legend>
            <govuk-client-side-validation>
                <govuk-input asp-for="Field1" type="number">
                    <govuk-input-label>Number 1</govuk-input-label>
                </govuk-input>
                <govuk-input asp-for="Field2" type="number">
                    <govuk-input-label>Number 2</govuk-input-label>
                </govuk-input>
                <govuk-input asp-for="Field3" type="number">
                    <govuk-input-label>Number 3</govuk-input-label>
                    <govuk-input-hint>Must be Number 1 + Number 2</govuk-input-hint>
                </govuk-input>
            </govuk-client-side-validation>
        </govuk-fieldset>

        <govuk-button type="submit">Submit</govuk-button>

    </form>
    @section scripts {
    <partial name="GOVUK/Validation" />
    <script type="text/javascript">
        const govuk = createGovUkValidator();

        const validator = govuk.getValidator();
        govuk.createErrorSummary();

        if (validator) {
            validator.setDefaults({
                highlight: govuk.showError,
                unhighlight: govuk.removeOrUpdateError,
            });

            validator.addMethod('custom', function (value, element, params) {
                console.log(value);
                console.log(element);
                console.log(params);
                var prop1 = $("#" + params.property1);
                var prop2 = $("#" + params.property2);

                if (prop1 && prop2) {
                    var sum = parseInt(prop1.val()) + parseInt(prop2.val());
                    if (sum != value) {
                        return false;
                    }
                }

                return true;
            });

            validator.unobtrusive.adapters.add("custom", ["property1", "property2"],
                function (options) {
                    options.rules['custom'] = {
                        property1: options.params.property1,
                        property2: options.params.property2,
                    };
                    options.messages['custom'] = options.message;
                }
            );
            validator.unobtrusive.parse();
        }
    </script>
}