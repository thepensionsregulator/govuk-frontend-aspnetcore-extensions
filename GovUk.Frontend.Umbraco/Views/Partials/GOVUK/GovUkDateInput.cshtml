@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<OverridableBlockListItem>;
@addTagHelper *, GovUk.Frontend.AspNetCore
@addTagHelper *, GovUk.Frontend.AspNetCore.Extensions
@using GovUk.Frontend.Umbraco
@using GovUk.Frontend.Umbraco.Models
@using GovUk.Frontend.Umbraco.Typography
@using GovUk.Frontend.Umbraco.Validation
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using ThePensionsRegulator.Umbraco.BlockLists;
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Extensions
@{
    var modelPropertyName = Model.Settings.Value<string>(PropertyAliases.ModelProperty);
    ModelStateEntry? modelStateEntry = null;
    int? attemptedDay = null, attemptedMonth = null, attemptedYear = null;
    string? errorMessage = null;
    DateTime? dateValue = null;
    if (!string.IsNullOrEmpty(modelPropertyName))
    {
        if (ViewContext.ModelState.TryGetValue(modelPropertyName, out modelStateEntry))
        {
            if (DateTime.TryParse(modelStateEntry?.AttemptedValue, out var date))
            {
                dateValue = date;
            }
            else
            {
                if (Int32.TryParse(modelStateEntry!.GetModelStateForProperty("Day")?.AttemptedValue, out var parsedDay)) { attemptedDay = parsedDay; }
                if (Int32.TryParse(modelStateEntry!.GetModelStateForProperty("Month")?.AttemptedValue, out var parsedMonth)) { attemptedMonth = parsedMonth; }
                if (Int32.TryParse(modelStateEntry!.GetModelStateForProperty("Year")?.AttemptedValue, out var parsedYear)) { attemptedYear = parsedYear; }
            }
            if (modelStateEntry.Errors.Any(x => x.ErrorMessage != ValidationConstants.FIELDSET_ERROR))
            {
                errorMessage = string.Join(". ", modelStateEntry.Errors.Where(x => x.ErrorMessage != ValidationConstants.FIELDSET_ERROR).Select(x => x.ErrorMessage));
            }
        }
    }
    var cssClass = (" " + Model.Settings.Value<string>(PropertyAliases.CssClasses)).TrimEnd();
    var legendIsPageHeading = Model.Settings.Value<bool>(PropertyAliases.FieldsetLegendIsPageHeading);
    var legend = Model.Content.Value<string>("legend")?.Replace("{{name}}", Umbraco.AssignedContentItem.Name);
    var hint = GovUkTypography.Apply(Model.Content.Value<string>("hint"), new TypographyOptions { RemoveWrappingParagraph = true });
    var fieldsetDescribedBy = string.IsNullOrEmpty(hint) ? null : modelPropertyName + "-hint";
    var isInvalid = modelStateEntry?.Errors.Any() ?? false;
    var ariaInvalid = isInvalid.ToString().ToLowerInvariant();
    var invalidClass = isInvalid ? " govuk-form-group--error" : null;
    var blocks = Model.Content.Value<OverridableBlockListModel>("fieldsetBlocks");
    if (blocks != null && blocks.Any())
    {
        fieldsetDescribedBy = $"{modelPropertyName}-blocks {fieldsetDescribedBy}".TrimEnd();
    }
}
<div class="govuk-form-group@(invalidClass)@(cssClass)">
    <govuk-client-side-validation error-message-required="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRequired))"
                                  error-message-range="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRange))">
        <govuk-fieldset described-by="@fieldsetDescribedBy" class="govuk-date-input__fieldset" role="group">
            <govuk-fieldset-legend is-page-heading="@legendIsPageHeading" class="@(legendIsPageHeading ? "govuk-fieldset__legend--l" : "govuk-fieldset__legend--for-field")">@legend</govuk-fieldset-legend>
            @if (blocks != null && blocks.Any())
            {
                blocks.RenderGrid = false;
                <div id="@modelPropertyName-blocks">
                    @await Html.PartialAsync("GOVUK/BlockList", blocks)
                </div>
            }
            @if (dateValue.HasValue)
            {
                <govuk-date-input name-prefix="@modelPropertyName" id="@modelPropertyName" value="@dateValue">
                    @if (!string.IsNullOrWhiteSpace(hint))
                    {
                        <govuk-date-input-hint>@Html.Raw(hint)</govuk-date-input-hint>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <govuk-date-input-error-message>@errorMessage</govuk-date-input-error-message>
                    }
                    <govuk-date-input-day maxlength="2" aria-invalid="@ariaInvalid" />
                    <govuk-date-input-month maxlength="2" aria-invalid="@ariaInvalid" />
                    <govuk-date-input-year maxlength="4" aria-invalid="@ariaInvalid" />
                </govuk-date-input>
            }
            else
            {
                <govuk-date-input name-prefix="@modelPropertyName" id="@modelPropertyName">
                    @if (!string.IsNullOrWhiteSpace(hint))
                    {
                        <govuk-date-input-hint>@Html.Raw(hint)</govuk-date-input-hint>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <govuk-date-input-error-message>@errorMessage</govuk-date-input-error-message>
                    }
                    <govuk-date-input-day maxlength="2" aria-invalid="@ariaInvalid" value="@attemptedDay" />
                    <govuk-date-input-month maxlength="2" aria-invalid="@ariaInvalid" value="@attemptedMonth" />
                    <govuk-date-input-year maxlength="4" aria-invalid="@ariaInvalid" value="@attemptedYear" />
                </govuk-date-input>
            }
        </govuk-fieldset>
    </govuk-client-side-validation>
</div>