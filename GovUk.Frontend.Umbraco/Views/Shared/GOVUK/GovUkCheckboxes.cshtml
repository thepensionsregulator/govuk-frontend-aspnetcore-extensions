@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IOverridableBlockReference<IOverridablePublishedElement,IOverridablePublishedElement>>;
@addTagHelper *, GovUk.Frontend.AspNetCore
@addTagHelper *, GovUk.Frontend.AspNetCore.Extensions
@using GovUk.Frontend.Umbraco
@using GovUk.Frontend.Umbraco.Models
@using GovUk.Frontend.Umbraco.Validation
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using ThePensionsRegulator.Umbraco.Blocks;
@using ThePensionsRegulator.Umbraco;
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Core.Strings;
@using Umbraco.Extensions
@{
    var checkboxes = Model.Content.Value<OverridableBlockListModel>(PropertyAliases.Checkboxes)!;
    var modelPropertyName = Model.Settings.Value<string>(PropertyAliases.ModelProperty);
    ModelStateEntry? modelStateEntry = null;
    if (!string.IsNullOrEmpty(modelPropertyName))
    {
        ViewContext.ModelState.TryGetValue(modelPropertyName, out modelStateEntry);
    }
    var cssClasses = (" " + Model.Settings.Value<string>(PropertyAliases.CssClasses)).TrimEnd();
    var fieldsetHint = Model.Content.Value<IHtmlEncodedString>(PropertyAliases.Hint);
    var fieldsetDescribedBy = string.IsNullOrWhiteSpace(fieldsetHint?.ToHtmlString()) ? null : modelPropertyName + "-hint";
    var legendIsPageHeading = Model.Settings.Value<bool>("legendIsPageHeading");
    var legend = Model.Content.Value<string>("legend")?.Replace("{{name}}", Umbraco.AssignedContentItem.Name);
    var selectedValues = new List<string>();
    if (!string.IsNullOrEmpty(modelStateEntry?.AttemptedValue)) { selectedValues.AddRange(modelStateEntry.AttemptedValue.ToUpperInvariant().Split(",")); }
    var isInvalid = (modelStateEntry is not null && modelStateEntry.ValidationState == ModelValidationState.Invalid && modelStateEntry.Errors.Any());
    var ariaInvalid = isInvalid.ToString().ToLowerInvariant();
    var invalidClass = isInvalid ? " govuk-form-group--error" : null;
    var blocks = Model.Content.Value<OverridableBlockListModel>("fieldsetBlocks");
    if (blocks != null && blocks.Any())
    {
        fieldsetDescribedBy = $"{modelPropertyName}-blocks {fieldsetDescribedBy}".TrimEnd();
    }
}
<div class="govuk-form-group@(invalidClass)@(cssClasses)">
    <govuk-client-side-validation error-message-required="@(Model.Settings.Value<string>(PropertyAliases.ErrorMessageRequired))">
        <govuk-fieldset described-by="@fieldsetDescribedBy" class="govuk-checkboxes__fieldset">
            <govuk-fieldset-legend is-page-heading="@legendIsPageHeading" class="@(legendIsPageHeading ? "govuk-fieldset__legend--l" : "govuk-fieldset__legend--for-field")">@legend</govuk-fieldset-legend>
            @if (blocks != null && blocks.Any())
            {
                blocks.RenderGrid = false;
                <div id="@modelPropertyName-blocks">
                    @await Html.PartialAsync("GOVUK/BlockList", blocks)
                </div>
            }
            <govuk-checkboxes name="@modelPropertyName">
                @{
                    if (!string.IsNullOrWhiteSpace(fieldsetHint?.ToHtmlString()))
                    {
                        <govuk-checkboxes-hint>@fieldsetHint</govuk-checkboxes-hint>
                    }
                    if (modelStateEntry != null && modelStateEntry.Errors.Any(x => x.ErrorMessage != ValidationConstants.FIELDSET_ERROR))
                    {
                        <govuk-checkboxes-error-message>@(string.Join(". ", modelStateEntry.Errors.Where(x => x.ErrorMessage != ValidationConstants.FIELDSET_ERROR).Select(x => x.ErrorMessage)))</govuk-checkboxes-error-message>
                    }
                    foreach (var block in checkboxes.FilteredBlocks())
                    {
                        if (block.Content.ContentType.Alias == ElementTypeAliases.CheckboxesDivider)
                        {
                            <govuk-checkboxes-divider>@(string.IsNullOrWhiteSpace(block.Content.Value<string>(PropertyAliases.CheckboxesDividerText)) ? "or" : block.Content.Value<string>(PropertyAliases.CheckboxesDividerText))</govuk-checkboxes-divider>
                        }
                        else
                        {
                            if (block.Settings.Value<bool>("exclusive"))
                            {
                                var value = block.Content.Value<string>(PropertyAliases.CheckboxValue) ?? string.Empty;
                                var checkboxHint = block.Content.Value<IHtmlEncodedString>(PropertyAliases.Hint);
                                <govuk-checkboxes-item value="@value" checked="@(selectedValues.Contains(value.ToUpperInvariant()))" class="@(block.Settings.Value<string>(PropertyAliases.CssClasses))" input-data-behaviour="exclusive" input-aria-invalid="@ariaInvalid">
                                    @(block.Content.Value<string>(PropertyAliases.CheckboxLabel))
                                    @{
                                        if (!string.IsNullOrWhiteSpace(checkboxHint?.ToHtmlString()))
                                        {
                                            <govuk-checkboxes-item-hint>@checkboxHint</govuk-checkboxes-item-hint>
                                        }
                                        var conditional = block.Content.Value<OverridableBlockListModel>(PropertyAliases.CheckboxConditionalBlocks)!;
                                        if (conditional.Any())
                                        {
                                            <govuk-checkboxes-item-conditional>
                                                @await Html.PartialAsync("GOVUK/BlockList", conditional)
                                            </govuk-checkboxes-item-conditional>
                                        }
                                    }
                                </govuk-checkboxes-item>
                            }
                            else
                            {
                                var value = block.Content.Value<string>(PropertyAliases.CheckboxValue) ?? string.Empty;
                                var checkboxHint = block.Content.Value<IHtmlEncodedString>(PropertyAliases.Hint);
                                <govuk-checkboxes-item value="@value" checked="@(selectedValues.Contains(value.ToUpperInvariant()))" class="@(block.Settings.Value<string>(PropertyAliases.CssClasses))" input-aria-invalid="@ariaInvalid">
                                    @(block.Content.Value<string>(PropertyAliases.CheckboxLabel))
                                    @{
                                        if (!string.IsNullOrWhiteSpace(checkboxHint?.ToHtmlString()))
                                        {
                                            <govuk-checkboxes-item-hint>@checkboxHint</govuk-checkboxes-item-hint>
                                        }
                                        var conditional = block.Content.Value<OverridableBlockListModel>(PropertyAliases.CheckboxConditionalBlocks)!;
                                        if (conditional.Any())
                                        {
                                            <govuk-checkboxes-item-conditional>
                                                @await Html.PartialAsync("GOVUK/BlockList", conditional)
                                            </govuk-checkboxes-item-conditional>
                                        }
                                    }
                                </govuk-checkboxes-item>
                            }
                        }
                    }
                }
            </govuk-checkboxes>
        </govuk-fieldset>
    </govuk-client-side-validation>
</div>